package com.javarush.task.task19.task1904;

import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Scanner;

/*
И еще один адаптер
Адаптировать Scanner к PersonScanner.
Классом-адаптером является PersonScannerAdapter.
В классе адаптере создать приватное финальное поле Scanner fileScanner. Поле инициализировать в конструкторе с одним аргументом типа Scanner.

Данные в файле хранятся в следующем виде:
Иванов Иван Иванович 31 12 1950
Петров Петр Петрович 31 12 1957

В файле хранится большое количество людей, данные одного человека находятся в одной строке. Метод read() должен читать данные только одного человека.

Требования:
1.?PersonScanner должен быть интерфейсом.
2.?Класс PersonScannerAdapter должен реализовывать интерфейс PersonScanner.
3.?Класс PersonScannerAdapter должен содержать приватное поле fileScanner типа Scanner.
4.?Класс PersonScannerAdapter должен содержать конструктор с параметром Scanner.
5.?Метод close() класса PersonScannerAdapter должен делегировать полномочие такому же методу fileScanner.
6.?Метод read() класса PersonScannerAdapter должен читать строку с файла, парсить её, и возвращать данные только одного человека, в виде объекта класса Person.
*/

public class Solution {
    public static class PersonScannerAdapter implements PersonScanner {

        private Scanner scanner;
        public PersonScannerAdapter(Scanner scanner){

            this.scanner=scanner;

        }

        @Override
        public Person read() throws IOException
        {
                String str = scanner.nextLine();
                String[] split = str.split(" ");

                Calendar calendar = new GregorianCalendar(Integer.parseInt(split[5]), Integer.parseInt(split[4]) - 1, Integer.parseInt(split[3]));
                Date date = calendar.getTime();
                Person person = new Person(split[1], split[2], split[0], date);
                return person;

        }

        @Override
        public void close() throws IOException
        {
            this.scanner.close();
        }
    }
}

public interface PersonScanner {
    Person read() throws IOException;

    void close() throws IOException;
}

public class Person {
    private String firstName;
    private String middleName;
    private String lastName;
    private Date birthDate;

    public Person(String firstName, String middleName, String lastName, Date birthDate) {
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.birthDate = birthDate;
    }

    @Override
    public String toString() {
        return String.format("%s %s %s %s", lastName, firstName, middleName, birthDate.toString());
    }
}
